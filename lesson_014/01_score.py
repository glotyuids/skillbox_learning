# -*- coding: utf-8 -*-

# Вас взяли на работу в молодой стартап. Идея стартапа - предоставлять сервис расчета результатов игр.
# Начать решили с боулинга, упрощенной версии.
#
# Правила такие.
#
# Всего 10 кеглей. Игра состоит из 10 фреймов. В одном фрейме до 2х бросков, цель - сбить все кегли.
# Результаты фрейма записываются символами:
#   «Х» – «strike», все 10 кеглей сбиты первым броском
#   «<число>/», например «4/» - «spare», в первый бросок сбиты 4 кегли, во второй – остальные
#   «<число><число>», например, «34» – в первый бросок сбито 3, во второй – 4 кегли.
#   вместо <число> может стоять прочерк «-», например «-4» - ни одной кегли не было сбито за первый бросок
# Результат игры – строка с записью результатов фреймов. Символов-разделителей между фреймами нет.
# Например, для игры из 4 фреймов запись результатов может выглядеть так:
#   «Х4/34-4»
# Предлагается упрощенный способ подсчета количества очков:
#   «Х» – strike всегда 20 очков
#   «4/» - spare всегда 15 очков
#   «34» – сумма 3+4=7
#   «-4» - сумма 0+4=4
# То есть для игры «Х4/34-4» сумма очков равна 20+15+7+4=46
#
# Надо написать python-модуль (назвать bowling), предоставляющий API расчета количества очков:
# функцию get_score, принимающую параметр game_result. Функция должна выбрасывать исключения,
# когда game_result содержит некорректные данные. Использовать стандартные исключения по максимуму,
# если не хватает - создать свои.
#
# Обязательно написать тесты на этот модуль. Расположить в папке tests.

# Из текущего файла сделать консольную утилиту для определения количества очков, с помощью пакета argparse
# Скрипт должен принимать параметр --result и печатать на консоль:
#   Количество очков для результатов ХХХ - УУУ.

from bowling import get_score
import argparse


if __name__ == '__main__':
    # неразрывный пробел. argparse подрезает все лишние пробелы и спецсимволы,
    # поэтому форматирование хелпа буду делать с помощью nbsp.
    nbsp = '\u00A0'
    # Ширина столбца хелпа составляет 54 символа. Перенос строки по пробелу. Этим и воспользуемся
    parser = argparse.ArgumentParser(description='Калькулятор итогового счёта игры в боулинг')
    parser.add_argument('--result', action='store', dest='game_result', required=True,
                        help=(f'Результат игры – строка с записью результатов фреймов. '
                              f'Символов-разделителей между фреймами нет.{nbsp * 12} '
                              f'Результаты фрейма записываются символами:{nbsp * 12} '
                              f'{nbsp * 2}Х – strike, все 10 кеглей сбиты первым броском;{nbsp * 5} '
                              f'{nbsp * 2}<число>/ - spare, в первый бросок сбиты 4 кегли,{nbsp * 4} '
                              f'{nbsp * 20}во второй – остальные;{nbsp * 12} '
                              f'{nbsp * 2}<число><число> – в первый бросок сбито 3,{nbsp * 11} '
                              f'{nbsp * 20}во второй – 4 кегли;{nbsp * 14} '
                              f'{nbsp * 2}- - прочерк, ни одной кегли не было сбито{nbsp * 11} '
                              f'{nbsp * 20}за первый бросок'))
    args = parser.parse_args()

    try:
        result = get_score(args.game_result)
    except Exception as exc:
        print(exc)
        exit()

    print(f'Количество очков для результатов {args.game_result} - {result}')



# При написании кода помнить, что заказчик может захотеть доработок и новых возможностей...
# И, возможно, вам пригодится паттерн проектирования "Состояние",
#   см https://clck.ru/Fudd8 и https://refactoring.guru/ru/design-patterns/state
# Зачет!